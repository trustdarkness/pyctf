For license information, see the file called LICENSE included in the archive.

argparse.py is included from the main python libraries, it is not included
in the license.

This ctf application is divided into the following python modules:
flags.py - creates flags using seeds and the wordlist files
host.py - configures an exploitable host for a ctf using a generated config
phases.py - comprises the configuration steps for each of the possible flags
  in phases organized by learning objective.
settings.py - contains data related to a given ctf project
solutions.py - generates config files, also parses generated configs
wordlists/* - comma separated wordlists for flags.

Usage:

1. To generate a config file, you need a unique id string.  A unique id can 
be a student id, a hostname, an ip address, etc.  The unique id will become the
filename for your config file.

Example:
$ python solutions.py -i mthomp33

2. The above will generate a config file titled mthomp33.conf in the cwd.
To view a human readable version of the config, you can run solutions in 
print mode.

Example: 
$ python solutions.py -p mthomp33.conf

3. To configure a host for the ctf, copy all the files included in this archive
to a running template host.  Untar the files, then as root run host.py

Example: 
# python host.py -c mthomp33.conf

You will see status output to the console.  If there are no errors in the 
output, you're done!  host.py will generate an additional file called
solutions.conf that will include any modifications it had to make in response
to the random flags it created.  Though the grading should be easy to do from
either config file, the one generated by host.py should be considered 
"canonical"

More features will be included in future versions!
